//switched to cutTransition just for fun
//runs super fast once the node server is up
//button press needs testing - rpio library throwing errors
//so that has highest priority now
//other than that we're fine, readline for testing right now



//migrating from applest-atem to atem-connection

const { Atem } = require('atem-connection'); //new library
const myAtem = new Atem();
var rpio = require('rpio');
//var ATEM = require('applest-atem'); //deprecated
const readline = require('readline');
const rl = readline.createInterface({
	input: process.stdin,
	output: process.stdout
});



myAtem.on('info', console.log);
myAtem.on('error', console.error);

myAtem.connect('192.168.10.240');

myAtem.on('connected', () => {
	myAtem.changeProgramInput(3).then(() => {
		console.log('Program input set');
	})
	console.log(myAtem.state);
})

myAtem.on('stateChanged', (state, pathToChange) => {
	console.log("STATE \n");
	console.log(state);
	console.log("VIDEO \n");
	console.log(state.video);
	console.log("MIXEFFECTS \n");
	console.log(state.video.mixEffects);
//	console.log("UPSTREAMKEYERS \n");
//	console.log(state.video.mixEffects.upstreamKeyers[0]); //having problems accessing upstreamkeystate
								//why do these libraries insist on using the weirdest json syntax ever	console.log("DOWNSTREAMKEYERS \N");
	console.log(state.video.downstreamKeyers);
});



rpio.init({
	gpiomem: false,
	mapping: 'physical',
	mock: undefined,
	close_on_exit: true,
});

//recurse();


//global variable to store active channel
let activechannel = 1; //probably should initialize this

//var atem = new ATEM();

const randomInt = () => Math.floor((Math.random() * 4) + 1);

//atem.connect('192.168.10.240');

/*
atem.on('connect', function() {
	doStuff();
});

*/

//the following function floods the screen because apparently the atem sends state change messages A LOT
//therefore i'll give it a sanity debug flipflop variable thingy
//which gets set back to active after i've changed the state

//var sanity = 1

/*
atem.on('stateChanged', function(err, state) {
	if (sanity === 1) {
	console.log(state.video); //catch the atem state.
	sanity = 0; //lets not flood the screen please.
	}
	if (state.video.ME[0].programInput != activechannel){ //WHY IS THIS AN ARRAY WITH ONLY ONE OBJECT INSIDE
	console.log(state.video.ME[0].programInput); //does this react when i set the channel by hand? yes
	activechannel = state.video.ME[0].programInput;
	pulseLED(state.video.ME[0].programInput - 1);
	sanity = 0;
	}
});


function recurse() {

	rl.question("what ?", function(num){
	if(num){
	doNum(num);
	} else {doStuff()};
	recurse();
	});

}


//this one for no user input
function doStuff() {
	atem.changeProgramInput(randomInt());
	atem.changePreviewInput(randomInt());
	atem.cutTransition();
	//	atem.changeProgramInput(3,1);
}

//this one for user input
function doNum(num) {

	if(num > 0 && num < 5){
		atem.changeProgramInput(num);
		atem.changePreviewInput(num);
		atem.cutTransition();
		//	atem.changeProgramInput(3,1); //these numbers are probably wrong <-- definetly wrong
		pulseLED(num-1); //zero index so we subtract 1
		sanity = 1; //for debugging purposes - reenables state printing to console
		activechannel = num; // store our active channel in global variable - to double check with state later on
	} else console.log('bad number, broski');
}

rpio.open(15, rpio.INPUT, rpio.PULL_UP);

function pollcb(pin)
{
	rpio.msleep(120);
	if (rpio.read(pin))
		return;
	console.log('Button pressed on pin P%d', pin);
	doStuff();

}

rpio.poll(15, pollcb, rpio.POLL_LOW);



function pulseLED(index){

	var pinmap = [12,32,33,35];

	if(pinmap[index]){		//zero index fuckery
		pin = pinmap[index];
	} else { return;}

	rpio.open(pin, rpio.OUTPUT);
	rpio.write(pin, rpio.HIGH);
	
	for(let i = 0; i<4; i++){
		if(pinmap[i] != pin){
		rpio.write(pinmap[i], rpio.LOW);
		}
	}
}



//PWM section - note that PWM requires root privileges 
//so as a first step we should write a quick test routine
//to see whether the service has those privileges
//note: only pins 12,32,33,35 are PWM enabled
//and gpiomem:false needs to be set (somewhere)
//SUCCESS!!! we have root privileges with our service

/*
rpio.open(12, rpio.PWM); //use pin 12 for pwm 
rpio.open(32, rpio.PWM); // etc... 
rpio.open(33, rpio.PWM);
rpio.open(35, rpio.PWM);
*/
/*
rpio.pwmSetClockDivider(8); 
rpio.pwmSetRange(12,1024);
*/
//encapsulating the following into a function

//pray that it works i guess....
//we'll call this function elsewhere with a lookup array to map the pin numbers


/*
function pulseLED(channelnumber)
{

var pinmap = [12,32,33,35];

if(pinmap[channelnumber]){		//zero index fuckery
	pin = pinmap[channelnumber];
} else { return;}



rpio.open(pin, rpio.OUTPUT); //let's try opening the pin only when we call the function
//rpio.pwmSetClockDivider(8); /* afaik these are global */
//rpio.pwmSetRange(12,1024);

/*
var times = 1;
var interval = 5; //milliseconds
var direction = 1;
var data = 0;
var range = 1024;
var max = 128;
var pulse = setInterval(function() {
	rpio.pwmSetData(pin,data);
	if (data === 0) {
		direction = 1;
		if (times-- === 0) {
			clearInterval(pulse);
			rpio.open(pin,rpio.INPUT);
			return;
		}
	} else if (data === max) {
		direction = -1;
	}
	data += direction;
}, interval, data, direction, times);
}
*/

/*
 *atem.on('stateChanged', function(err, state) {
 *  console.log(state); // catch the ATEM state.
 *});
 */



